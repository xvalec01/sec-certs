@startuml DashboardArchitecture
skinparam backgroundColor white
skinparam classAttributeIconSize 0
skinparam linetype ortho
skinparam packageStyle rectangle

skinparam packageBorderColor #333333
skinparam packageBackgroundColor #F8F9FA
skinparam classBorderColor #666666
skinparam classBackgroundColor white
skinparam arrowColor #4A90E2
skinparam noteBackgroundColor #FFF3CD
skinparam noteBorderColor #FFEAA7

' Font settings
skinparam defaultFontSize 11
skinparam classFontSize 11
skinparam packageFontSize 12
skinparam titleFontSize 16
skinparam classFontColor black
skinparam packageFontColor #2C3E50
skinparam titleFontColor #2C3E50

title sec-certs.org Dashboard Architecture

package "Application Core" #FFE4B5 {
    class "Flask App (Existing)" as FlaskApp {
        + run()
        + route_handlers
    }

    class DashApp {
        + server : Flask
        + layout : html.Div
        + init_app(app: Flask)
        + run_server()
    }
    note right of DashApp : Central Dash Application\nIntegrates with Flask server

    class DashboardLayoutManager {
        + components : List[Component]
        + user_preferences : dict
        + build_layout(user_id) : html.Div
        + refresh_layout()
    }
    note bottom of DashboardLayoutManager : Layout Orchestrator\nBuilds UI from registered components

    class CallbackManager {
        + callbacks : dict
        + state_handlers : dict
        + register_callbacks(app: DashApp)
        + handle_interaction(event)
    }
    note bottom of CallbackManager : Event Coordinator\nManages interactive behavior

    class "init_dashboard()" as Init <<function>> {
        + bootstrap_components()
        + setup_routing()
    }
    note right of Init : Bootstrap Function\nInitializes dashboard system

    Init ..> DashApp : creates
    Init ..> CallbackManager : configures
}

package "Component Registries" #E6F3FF {
    class GraphRegistry {
        + registered_graphs : Dict[str, Type]
        + metadata : Dict[str, GraphMeta]
        + register(cls: BaseGraph)
        + get_graph(type: str) : BaseGraph
        + list_available() : List[str]
    }

    class FilterRegistry {
        + registered_filters : Dict[str, Type]
        + dependencies : Dict[str, List]
        + register(cls: BaseFilter)
        + get_filter(type: str) : BaseFilter
        + get_compatible_filters() : List[str]
    }
}

package "Graph Components" #E8F5E8 {
    abstract class BaseGraph {
        + title : str
        + config : dict
        + data_requirements : List[str]
        {abstract} + render(data: DataFrame) : dcc.Graph
        {abstract} + get_config_panel() : html.Div
        + validate_data(df: DataFrame) : bool
    }
    
    class BarChart {
        + orientation : str
        + color_scheme : str
        + render(data: DataFrame) : dcc.Graph
        + get_config_panel() : html.Div
    }
    
    class PieChart {
        + show_labels : bool
        + hole_size : float
        + render(data: DataFrame) : dcc.Graph
        + get_config_panel() : html.Div
    }
    
    class TimeSeriesChart {
        + date_column : str
        + aggregation : str
        + render(data: DataFrame) : dcc.Graph
        + get_config_panel() : html.Div
    }

    BarChart -up-|> BaseGraph
    PieChart -up-|> BaseGraph  
    TimeSeriesChart -up-|> BaseGraph
}

package "Filter Components" #F0E6FF {
    abstract class BaseFilter {
        + name : str
        + filter_type : str
        + dependencies : List[str]
        {abstract} + render(state: dict) : html.Div
        {abstract} + apply(df: DataFrame, state: dict) : DataFrame
        + get_state_schema() : dict
    }
    
    class DateRangeFilter {
        + min_date : date
        + max_date : date
        + render(state: dict) : html.Div
        + apply(df: DataFrame, state: dict) : DataFrame
    }
    
    class SchemeFilter {
        + available_schemes : List[str]
        + multi_select : bool
        + render(state: dict) : html.Div
        + apply(df: DataFrame, state: dict) : DataFrame
    }

    DateRangeFilter -up-|> BaseFilter
    SchemeFilter -up-|> BaseFilter
}

package "Data & Persistence Layer" #FFFACD {
    class DataService {
        + cache : dict
        + connection_pool : Pool
        + get_cc_dataframe() : DataFrame
        + get_fips_dataframe() : DataFrame
        + refresh_cache()
        + get_filtered_data(filters) : DataFrame
    }
    note right of DataService : Data Access Layer\nCentralized data management\nwith intelligent caching

    class DashboardStore <<MongoDB>> {
        + collection : Collection
        + get_dashboard(user_id) : Dashboard
        + save_dashboard(dashboard: Dashboard)
        + get_user_preferences(user_id) : dict
    }

    class ActiveFilterState <<Redis>> {
        + redis_client : Redis
        + ttl : int
        + get_state(session_id) : dict
        + update_state(session_id, state)
        + clear_session(session_id)
    }
}

package "Data Models" #F5F5F5 {
    entity DataFrame <<Pandas>> {
        + columns : Index
        + dtypes : Series
        + filter()
        + groupby()
        + pivot_table()
    }
    
    entity Dashboard <<Document>> {
        + user_id : str
        + layout_config : dict
        + created_at : datetime
        + updated_at : datetime
    }
    
    entity DashboardItem <<Document>> {
        + item_id : str
        + item_type : str
        + position : dict
        + config : dict
    }
}

' Relationships
FlaskApp -right-> Init : initializes

DashApp *-down- DashboardLayoutManager : contains
DashApp *-down- CallbackManager : contains

DashboardLayoutManager o.right.> GraphRegistry : queries
DashboardLayoutManager o.right.> FilterRegistry : queries
DashboardLayoutManager o-down-> DashboardStore : loads state

CallbackManager o-down-> ActiveFilterState : manages session
CallbackManager o-down-> DataService : fetches data
CallbackManager o.right.> BaseGraph : triggers render
CallbackManager o.right.> BaseFilter : applies filters

GraphRegistry o-down- "1..*" BaseGraph : registers
FilterRegistry o-down- "1..*" BaseFilter : registers

DataService -down-> DataFrame : provides
DashboardStore -down-> Dashboard : stores
Dashboard *-down- "1..*" DashboardItem : contains

@enduml